#version 410

uniform sampler2D tex; // 캐릭터 및 배경 메쉬에서 동시에 사용할 프래그먼트 셰이더로 변경했으므로, 텍스쳐를 받는 sampler2D 변수 이름을 'tex' 로 바꿈.
in vec2 fragUV;
out vec4 outCol;

void main(){
  outCol = texture(tex, fragUV);

  /*
    아래 if 문의 조건문과 블록같은 구조를 'Alpha testing (알파 테스팅)' 기법이라고 함.

    이게 뭐냐면, 알파 값에 대한 컷오프 기준값(cutoff threshold) 값을 정의하고,
    이 값보다 크거나 같으면 프래그먼트 연산을 다음 단계로 넘겨주고,
    작으면 discard 라는 키워드를 이용해서 프래그먼트 연산이 다음 그래픽 파이프라인 단계로 넘어가는 것을 차단함.

    즉, 아래처럼 컷오프 기준값 1.0 보다 낮은 투명도를 갖는
    색상값 outCol 에 대해서는 다음 프래그먼트 연산 단계로 넘어가지 못하도록
    프래그먼트를 버린다는 뜻.

    이렇게 하면, 투명도가 1보다 낮은 프래그먼트들은
    화면에 아예 렌더링되지 않을거임.

    -> 이거 옛날에 캔버스 프로젝트 만들 때, pixi.js 로 메타볼효과 만들 때 
    threshold filter 만들던 거랑 굉장히 유사한 원리임.
    특정 알파값 이하는 버리고, 그 이상은 다음 프래그먼트 처리로 넘어가게 하는 것!

    즉, png 파일 형식인 캐릭터 텍스쳐의 배경부분(여기가 투명도가 전부 0일거임)은
    그래픽 파이프라인의 다음 단계인 프래그먼트 연산(처리) 로 넘어가지 못하고
    화면에 찍히지 않게 됨으로써, 캐릭터 이미지만 화면에 렌더될거임. 

    이렇게 discard를 해주면, 프래그먼트 연산 처리 단계로 넘어가지 않게 되므로,
    깊이버퍼를 통한 깊이계산에서도 해당 픽셀이 제외됨.

    무슨 말이냐면, 암만 투명하게 렌더링되어도,
    discard를 하지 않아서 다음 단계(프래그먼트 처리)로 넘어가버리면,
    깊이버퍼가 적용되어서, 분명 투명한 픽셀인데,
    이 투명한 픽셀에 의해서 뒤에 존재하는 메쉬 요소가 가려지는
    괴상한 현상이 발생함.

    -> 이 현상이 js api 4.0 에서 mesh 로 된 particleLight 구현할 때
    배경이 투명한 marker 에 의해 가려졌던 이유임!
  */
  if (outCol.a < 0.7) {
    discard;
  }
}

/*
  알파 테스팅으로 렌더링했을 때 오히려 외곽선이 
  aliasing 같은 깨짐현상이 발생하는 이유

  greenMan 텍스쳐를 샘플링해서
  알파테스팅 처리를 통해 렌더링해줄 때보다
  알파테스팅 안하고 렌더링해줬을 때
  오히려 더 캐릭터 이미지가 부드럽게 렌더링되는 걸 볼 수 있음.

  이건 왜그러냐면,
  캐릭터 이미지 외곽선 부위에 투명도가 0은 아니지만,
  1에 미치지 못하는 애매한 프래그먼트들 마저 
  싹 다 discard 로 프래그먼트들을 버리기 때문에

  외곽선을 부드럽게 그려주던 픽셀들이 전부 날아가버려서
  계단현상 같은 외곽선 깨짐 현상이 발생하는 것임.

  -> 이럴 경우 컷오프 기준값을 0.7 ~ 0.8 정도로
  융통성있게 낮춰주면 외곽선이 더 부드럽게 렌더링될 수 있음.
*/